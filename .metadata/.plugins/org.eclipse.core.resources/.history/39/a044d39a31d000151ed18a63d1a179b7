import scala.io._
import scala.collection.JavaConversions._
import scala.util.matching.Regex
import java.io._
import java.lang._

object getExtendedProperties {

  val writer = new PrintWriter(new File("C:\\Users\\Winthrop\\dev\\ExtProperties.sql"))
  def getListOfSubDirectories(directoryName: String): Array[String] = {
      return (new File(directoryName)).listFiles.filter(_.isDirectory).map(_.getName)
    }
  
  def getTable(filePath:String):String={
    val splitPath = filePath.split(raw"\\")
    for(i <- 0 until splitPath.length){
      if(splitPath(i).contains(".sql")){
        return splitPath(i).toString.replace(".sql", "").replace("\'", "").replace(".table", "")
      }
    }
    return "Table not found"
  }
  
  def getDescription(line:String):String={
    var lines = line.split(",")
    
    for(i <- 0 until lines.length){
      if(lines(i).contains("@value")){
        var returnStr = lines(i).replace("\'", "").split(raw".") 
        return returnStr(0).toString
//          lines(i).replace("@value", "").replace("=","").replace("N\'", "").replace("\'", "")
      }
    }
    
    
    return "Needs Description"
  }
  
  def getColumn(line:String, pattern:Regex):String={
    if(line.contains("@level2name")){
      return "found "+line
    }
    return" not found "+ line
  }
  
  
  def main(args: Array[String]): Unit = {
    
    
    writer.write("INSERT INTO table.DataDictionary (Schema, Table, Column, Description, Usage) \n VALUES \n")
    var firstValue = true
    var schemas = getListOfSubDirectories("C:\\Users\\Winthrop\\dev\\qdw\\Database\\Warehouse\\Schema Objects\\Schemas")
    val pattern = new Regex("'[A-z]*'");

    for(j <- 0 until schemas.length){
      if(schemas(j) != "staging" && schemas(j) != "testdata"){
        var tables = new java.io.File("C:\\Users\\Winthrop\\dev\\qdw\\Database\\Warehouse\\Schema Objects\\Schemas\\" + schemas(j) +"\\Tables\\").listFiles.filter(_.getName.endsWith(".sql"))
        
        var query:String = if(!firstValue) ",VALUES(\'" + schemas(j) + " \' " else " VALUES(\'" + schemas(j) + " \' "
        if(!firstValue)
            firstValue = false
        
        for(i <- 0 until tables.length){
          query = query + ", \'" + getTable(tables(i).toString) + "\'"
          
          val source = Source.fromFile(tables(i))
          for (line <- source.getLines()){
            if(line.contains("@level2name"){
              println("schema: " + schemas(j) + " table: " + getTable(tables(i).toString) + " column: " + getColumn(line, pattern))
            }
          }//lines
          source.close()
        }//tables
      }//if good
    }//j
    
     
  
  }//main
  writer.close()
}//obj
